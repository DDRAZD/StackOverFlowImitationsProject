Created new project with both MVC and WebAPI
Added to the projec the SQL query used to create the database
had to remove "cascade on delete" for both answers and votes to avoid cascading path (put NO ACTION)


added the different projects (class libararies but skipped the interfaces layers, contracts, as not necessary)

data access layer is essentially built in to EF so will include it only at service layer

added image library

-------------------------
installing packages within DomainModels

install-package EntityFramework 

Installing it as well in the main project - stackoverflowproject

----------------
adding the connection string to the existing DB we built - this is in Web.Config in the main project

first, adding session time out - in the <system.web> adding 60 minutes as session timeout:
<sessionState timeout="60"></sessionState>

added:
<connectionStrings>
		<add name="StackOverflowDatabaseDBContext" connectionString="data source=localhost; Server=localhost;Database=master;Trusted_Connection=True;; initial catalog=StackOverflowDataBase" providerName="System.Data.SqlClient" />
</connectionStrings>

at the end of the file

-----------------------------
adding domain model classes:
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

mimic the same structure you already have in the database
for the primary key, add:

 [DatabaseGenerated(DatabaseGeneratedOption.Identity)]

 this means this is automatically generated by the DB and used as the identity for each entry

 ----------------
 view model is binded to the view
 domain model is binded to the DB table
 -----------------

 when building the domain models, the "virtual" means it will be binded at run time. this is how you use the foregin key. you give the key within
 the model and it will pull at run time

 example: 
 [ForeignKey("CategoryID")]
 public virtual Category Category { get; set; }
 [ForeignKey("UserID")]
 public virtual User User { get; set; }
 where the IDs are columns specfiied above it as part of the Question model

 ---------------
 when adding DBContext in DomainModels - "rule" is that the class name is identical to the connection string name

 -------------------
 in this project, we did not directly specify a data access layer as EF acts as the data access layer. We just need to implement the repository
 layer to perform CRUD operations vs. EF

 in addition, it is best to add interfaces for the repository - here we are not doing it as a separate project, but building the interfaces within the repositotires

 ---------------------

 to find the latest user ID, use Linq to simply select all and give the max:
 db.Users.Select(y => y.UserID).Max();

 ----------------------------------------
 
 Best order of steps:
 1) create the database or at least plan the tables to use
 2) create DomainModels that mimic it
 3) create repositories to do CRUD
 4) create domain models
 ----------------------------------------


 in both DomainModels (bind the DB) and ViewModels (bind the view) we are using:
 using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
this is necessary as you are using annotations such as (for the email field as an example):

[Required]
[RegularExpression(@"(\w+@[a-zA-Z_]+?\.[a-zA-Z{2,6})")]

----------------------------------
when adding view models, best practice is to add one PER PAGE: i.e. a view model to edit password, a view model to edit user details etc.
This allows for very clean logic and prevents the need to build all these checks and balances in the controller or service layer
i.e. if all the exceptions are built it with "[Requird]" annotations or "[RegularExpression]" annotations
-------------------------

after creating the different classes of view models, you can start using them with each other, just like you do with domain models. Example:
"public virtual UserViewModel User { get; set; }
 public virtual CategoryViewModel Category { get; set; }
 public virtual List<AnswerViewModel> Answers { get; set; }"

 ----------------------------------
 in the service layer, beyond needing to install entity framework, you also need to install:
 Install-Package AutoMapper -Version 7.0.1

 Automapper allows to mapp viewmodel to domain model and viceversa
 Automapper exentsions allow to ignore unmatched properties between ViewModel and DomainModel, without them, exception would be raised

 to handle:
-  add to servicelayer class of MapperExensions. 
- make is a static class
- import "using AutoMapper"
- add the following code:
private static void IgnoreUnmappedProperties(TypeMap map, IMappingExpression expr)
        {
            foreach(string propName in map.GetUnmappedPropertyNames())
            {
                if(map.SourceType.GetProperty(propName) != null)
                {
                    expr.ForMember(propName, opt => opt.Ignore());
                }
                if(map.DestinationType.GetProperty(propName) != null)
                {
                    expr.ForMember(propName, opt => opt.Ignore());
                }
            }
        }
       public static void IgnoreUnmapped(this IProfileExpression profile)
        {
            profile.ForAllMaps(IgnoreUnmappedProperties); //calling the above function
        }

I have put the code (pasted it) in the toolbox of visual studio for quick reference

--------------------------------------
implement a helper to hash the password (i also put it in visual studio toolbox)

using System.Security.Cryptography;

public class SHA256HashGenerator
    {
        public static string GenerateHash(string inputData)
        {
            using (SHA256 sha256Hash=SHA256.Create())
            {
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(inputData));
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }
                return builder.ToString();
            }
        }
    }


    --------------------------------------
    in the different service layer classes, as they will handle both domain models and view models, you need:

using AutoMapper;
using AutoMapper.Configuration;

--------------------------

EF is a data access logic so will be absent from the service layer in which it is all business logic
service layer talks repository layer which talke to the data layer (the DB); we leverage the different view models in the service layer 
and use AutoMapper to map them back to DomainModels that the repository layer can consume
this works in this manner as the controllers are the ones calling the service layer and they have no notion of the DomainModels
and only know the ViewModels

--------------------------------
used automapper code to move from viewmodel to domainmodel:
var config = new MapperConfiguration(cfg => {
                cfg.CreateMap<EditUserDetailsViewModel, User>();
                cfg.IgnoreUnmapped();
            });
            IMapper mapper = config.CreateMapper();           
            User u = mapper.Map<EditUserDetailsViewModel, User>(uvm); //left is the source type, right is the destination type, like massive casting

-------------------------------------------------


Carrying foreign key mapping from DomainModel to ViewModel

I have in domain model, the question table pointing to answers table which points to the votes table
We did so with virtual property and foreign keys
to carry it through to the ViewModels, we need to map those using the following code (this is copied from instructor):
"
Since the Questions table has foreign keys, you need to add mapping to the following models also.

User -> UserViewModel.

Category -> CategoryViewModel.

So add this code while retrieving questions from questions table i.e. in "GetQuestions" and "GetQuestionByQuestionID" methods in "QuestionsService".

var config = new MapperConfiguration(cfg => {
cfg.CreateMap<Question, QuestionViewModel>();
cfg.CreateMap<User, UserViewModel>();
cfg.CreateMap<Category, CategoryViewModel>();
cfg.CreateMap<Answer, AnswerViewModel>();
cfg.CreateMap<Vote, VoteViewModel>();
cfg.IgnoreUnmapped();
});


Use the same mapping configuration every time when you retrieving data from "questions" or "answers" table.

"

-----------------------------------------------------------------------
moving to front end (controllers and views):

in main project, just install:

install-package jQuery
install-package Popper.js
install-package Bootstrap

-------------------------------------------------
to optimize payload and perforfomance, we will use bundles. This way, when the browser calls the server when loading the layout page and the difference 
js scripts, it will not go one by one, but load all the needed scripts as a bundle

To do so, at the top line project:

install-package Microsoft.AspNet.Web.Optimization

Then, we need to add a config file that will create a bundle (bundle will be for a jQuery, bootstrap and popper.js files) -> go to App_Start folder and add:

BundleConfig.cs

add: using System.Web.Optimization;

create static method:

public class BundleConfig
    {
        /// <summary>
        /// this method needs to be invoked in the global.asax file with " App_Start.BundleConfig.RegisterBundles(BundleTable.Bundles);"
        /// </summary>
        /// <param name="bundles"></param>
        public static void RegisterBundles(BundleCollection bundles)
        {
            //bundle names are user defined

            //creating a bundle called "bootstrap" in scripts, comprising of 3 js files that are sufficient to run bootstrap
            bundles.Add(new Bundle("~/Scripts/bootstrap").Include("~/Scripts/jquery-3.6.0.js", "~/Scripts/umd/popper.js", "~/Scripts/bootstrap.js"));

            //creating a bundle for styles
            bundles.Add(new Bundle("~/Styles/bootstrap").Include("~/Content/bootstrap.css"));

            //you are free to add styles or scrips as you wish to the bundles, but the above are the base ones for bootstrap
            //for example, add a Web file in "Content" of the main application names Styles.css, then create a bundle for it:
            bundles.Add(new Bundle("~/Styles/site").Include("~/Content/Styles.css"));

            //after creation of the bundles, we need to enable optimization:
            BundleTable.EnableOptimizations = true;

        }
    }
    -------------------------------------------------

    add "Shared" folder in views, where it is best to add layout pages

    -------------------------------------------------------
    add layout page (Add Item -> Web -> MVC -> MVC 5 Layout Page (Razor))

    ---------------------------------------------------

    in layout page, rendering the bundles to be sent to the browser:
    @using System.Web.Optimization
    
    and in the <head>:
    @Scripts.Render("~/Scripts/bootstrap")
    @Styles.Render("~/Styles/bootstrap")
    @Styles.Render("~/Styles/site")

    -------------------------------------
    even without using any Owin or identity, within Razor you can check for user login using the following code in the layout (to present in navbar only if no
    user has logged in):

     @if (Session["CurrentUserName"] == null)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/account/login">Login</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/account/register">Register</a>
                    </li>
                }

    ----------------------------------------------------------

    to override bootstrap in some cases, like showing different color in navbar, we can use the user created "Styles.css" and add "important":
    
#active
{
    color: yellow !important;
}

.navbar a:link, .navbar a:visited
{
    color: white !important
}----------------------------------------------------

adding dependancy injection:

install-package unity.Mvc for the project level (i.e. not the c# libraries projects)-> file UnityConfig.cs will be aututomatically created in App_start in UnityConfig.cs, import the servicecontracts and service layer (That will be injected)

here i did:
install-package Unity.Mvc5 (in main project as the controllers are there)

add  UnityConfig.RegisterComponents();   to the global.asax file (this will be mentioned to you automatically from the READ.ME that comes from the 
unit.mvc5 installation)

this simply register the componenets you will be injecting later - > you will have to create the registration method in the config (unityconfig.cs)

We also need to install another dependancy injection package, but not for MVC (not for the controllers), but for API -> it will collide with the package we just installed

install-package Unity.WebApi

it will ask to override UnityCofig.cs, say "yes"

because it overriden UnityConfig.cs, add manually in that file:
using Unity.Mvc5;
using System.Web.Mvc;

allow both dependnacy injection of MVC and WebAPI:
DependencyResolver.SetResolver(new Unity.Mvc5.UnityDependencyResolver(container));//because we have both WebAPI and MVC dependancy injection, we need 
//to align them, hence we are sending the MVC resolver to the other resolver

GlobalConfiguration.Configuration.DependencyResolver = new Unity.WebApi.UnityDependencyResolver(container);//this allows dependancy injection for WebAPI


--------------------------------
the different data annotations you added to viewmodels check on the server side the validity of each field and updates 
the value of "ModelState"

you need to check on the contoller side that the the model state is good:


"
if(ModelState.IsValid)
{
                Session["CurrentUserID"]=uid;
                Session["CurrentUserName"] = rvm.Name;
                Session["CurrentUserEmail"]=rvm.Email;
                Session["CurrentUserPassword"] = rvm.Password;
                Session["CurrentUserIsAdmin"] = false;
}
"
notice how we set the Session's variables -> it is like a session ViewBag










