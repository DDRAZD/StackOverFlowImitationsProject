Created new project with both MVC and WebAPI
Added to the projec the SQL query used to create the database
had to remove "cascade on delete" for both answers and votes to avoid cascading path (put NO ACTION)


added the different projects (class libararies but skipped the interfaces layers, contracts, as not necessary)

data access layer is essentially built in to EF so will include it only at service layer

added image library

-------------------------
installing packages within DomainModels

install-package EntityFramework 

Installing it as well in the main project - stackoverflowproject

----------------
adding the connection string to the existing DB we built - this is in Web.Config in the main project

first, adding session time out - in the <system.web> adding 60 minutes as session timeout:
<sessionState timeout="60"></sessionState>

added:
<connectionStrings>
		<add name="StackOverflowDatabaseDBContext" connectionString="data source=localhost; Server=localhost;Database=master;Trusted_Connection=True;; initial catalog=StackOverflowDataBase" providerName="System.Data.SqlClient" />
</connectionStrings>

at the end of the file

-----------------------------
adding domain model classes:
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

mimic the same structure you already have in the database
for the primary key, add:

 [DatabaseGenerated(DatabaseGeneratedOption.Identity)]

 this means this is automatically generated by the DB and used as the identity for each entry

 ----------------
 view model is binded to the view
 domain model is binded to the DB table
 -----------------

 when building the domain models, the "virtual" means it will be binded at run time. this is how you use the foregin key. you give the key within
 the model and it will pull at run time

 example: 
 [ForeignKey("CategoryID")]
 public virtual Category Category { get; set; }
 [ForeignKey("UserID")]
 public virtual User User { get; set; }
 where the IDs are columns specfiied above it as part of the Question model

 ---------------
 when adding DBContext in DomainModels - "rule" is that the class name is identical to the connection string name

 -------------------
 in this project, we did not directly specify a data access layer as EF acts as the data access layer. We just need to implement the repository
 layer to perform CRUD operations vs. EF

 in addition, it is best to add interfaces for the repository - here we are not doing it as a separate project, but building the interfaces within the repositotires

 ---------------------

 to find the latest user ID, use Linq to simply select all and give the max:
 db.Users.Select(y => y.UserID).Max();

 ----------------------------------------
 
 Best order of steps:
 1) create the database or at least plan the tables to use
 2) create DomainModels that mimic it
 3) create repositories to do CRUD
 4) create domain models
 ----------------------------------------


 in both DomainModels (bind the DB) and ViewModels (bind the view) we are using:
 using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
this is necessary as you are using annotations such as (for the email field as an example):

[Required]
[RegularExpression(@"(\w+@[a-zA-Z_]+?\.[a-zA-Z{2,6})")]

----------------------------------
when adding view models, best practice is to add one PER PAGE: i.e. a view model to edit password, a view model to edit user details etc.
This allows for very clean logic and prevents the need to build all these checks and balances in the controller or service layer
i.e. if all the exceptions are built it with "[Requird]" annotations or "[RegularExpression]" annotations
-------------------------

after creating the different classes of view models, you can start using them with each other, just like you do with domain models. Example:
"public virtual UserViewModel User { get; set; }
 public virtual CategoryViewModel Category { get; set; }
 public virtual List<AnswerViewModel> Answers { get; set; }"

 ----------------------------------
 in the service layer, beyond needing to install entity framework, you also need to install:
 Install-Package AutoMapper -Version 7.0.1

 Automapper allows to mapp viewmodel to domain model and viceversa






